{"version":3,"file":"static/js/137.7069ffb1.chunk.js","mappings":"2LAEaA,EAAa,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,SAChC,OACI,wBACGD,EAAOE,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,yBACA,SAAC,KAAD,CAAMC,GAAE,kBAAaD,GAAME,MAAO,CAACC,KAAMN,GAAzC,SAAqDE,KAD5CC,EADC,KAOrB,C,+LCTDI,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,uBADQ,cACzBG,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qDAKjBC,EAAY,mCAAG,WAAOC,GAAP,uFACHP,EAAAA,EAAAA,IAAA,iBAAoBO,IADjB,cACpBJ,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZI,EAAY,mCAAG,WAAOD,GAAP,uFACHP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADG,cACpBJ,EADoB,yBAEnBA,EAASC,KAAKK,MAFK,2CAAH,sDAKZC,EAAe,mCAAG,WAAMH,GAAN,uFACNP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,aADM,cACvBJ,EADuB,yBAEtBA,EAASC,KAAKC,SAFQ,2CAAH,sDAKfM,EAAgB,mCAAG,WAAOC,GAAP,uFACPZ,EAAAA,EAAAA,IAAA,8BAAiCY,IAD1B,cACxBT,EADwB,yBAEvBA,EAASC,KAAKC,SAFS,2CAAH,qD,4ICzBhBQ,GAAaC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,gKAUVE,GAAcF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,iJAQXI,EAAeJ,EAAAA,EAAAA,OAAH,mK,SClBZK,EAAe,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,MACpC,OACI,+BACA,SAAC,KAAD,CAAQC,cAAe,CAAED,MAAOA,GAASD,SAAUA,EAAnD,UACF,UAACP,EAAD,YACE,SAACG,EAAD,CACEO,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,WAAS,KAEX,SAACR,EAAD,CAAcK,KAAK,SAAnB,0BAOP,E,4CCkBD,EAhCe,WAAO,IAAD,EACnB,GAAwCI,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMR,EAAK,UAAGO,EAAaE,IAAI,gBAApB,QAAgC,GAC3C,GAA2BC,EAAAA,EAAAA,UAAS,IAApC,eAAMvC,EAAN,KAAcwC,EAAd,KACMvC,GAAWwC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACV,GAAa,KAAVb,EAAH,CAGA,IAAMc,EAAU,mCAAG,qGACAxB,EAAAA,EAAAA,IAAiBU,GADjB,OACbjB,EADa,OAEnB4B,EAAU5B,GAFS,2CAAH,qDAIhB+B,GALC,CAMF,GAAE,CAACd,IAEF,IAAMD,EAAQ,mCAAG,WAAOR,EAAP,0EAAiBwB,EAAjB,EAAiBA,UAGhCP,EAD6B,KAAVR,EAAe,CAAEA,MAAAA,GAAU,CAAC,GAE/CQ,EAAgB,CAACR,MAAOT,EAAOS,QAC/Be,IALe,2CAAH,wDAQZ,OACI,iCACA,SAACjB,EAAD,CAAcC,SAAUA,EAAUC,MAAOA,KACzC,SAAC9B,EAAA,EAAD,CAAYC,OAAQA,EAAQC,SAAUA,MAG7C,C","sources":["components/MoviesList/MoviesList.jsx","components/helpers/api.jsx","components/SearchMovies/SearchMovies.styled.jsx","components/SearchMovies/SearchMovies.jsx","pages/Movies.jsx"],"sourcesContent":["import { Link } from \"react-router-dom\"\n\nexport const MoviesList = ({movies, location}) => {\n    return(\n        <ul>\n          {movies.map(({ title, id }) => (\n            <li key={id}>\n            <Link to={`/movies/${id}`} state={{from: location}}>{title}</Link>\n            </li>\n          ))}\n        </ul>\n    )\n}","import axios from \"axios\";\n\nconst API_KEY = 'ace05e7e513bb2dcaf00821262e8ca69';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: API_KEY\n};\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day`);\n  return response.data.results;\n}\n\nexport const getMovieById = async (movieId) => {\n  const response = await axios.get(`/movie/${movieId}`);\n  return response.data;\n}\n\nexport const getMovieCast = async (movieId) => {\n  const response = await axios.get(`/movie/${movieId}/credits`);\n  return response.data.cast;\n}\n\nexport const getMovieReviews = async(movieId) =>{\n  const response = await axios.get(`/movie/${movieId}/reviews`);\n  return response.data.results;\n}\n\nexport const getMoviesByQuery = async (values) => {\n  const response = await axios.get(`search//movie?query=${values}`);\n  return response.data.results;\n}","import styled from \"@emotion/styled\";\nimport {  Form, Field  } from \"formik\"\n\nexport const StyledForm = styled(Form)`\ndisplay: flex;\nalign-items: center;\nwidth: 100%;\nmax-width: 600px;\nbackground-color: #fff;\nborder-radius: 3px;\noverflow: hidden;\n`\n\nexport const StyledInput = styled(Field)`\n  width: 50%;\n  font: inherit;\n  font-size: 20px;\n  border-color: gray;\n  padding-left: 4px;\n  padding-right: 4px;\n`\nexport const StyledButton = styled.button`\nheight: 28px;\ntransition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\ncursor: pointer;\noutline: none;\n&:hover {\n    opacity: 1;\n  }\n`","import { Formik } from \"formik\";\nimport { StyledButton, StyledForm, StyledInput } from \"./SearchMovies.styled\";\n\nexport const SearchMovies = ({onSubmit, query}) =>{\n    return (\n        <>\n        <Formik initialValues={{ query: query }} onSubmit={onSubmit}>\n      <StyledForm >\n        <StyledInput\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <StyledButton type=\"submit\">\n            Search\n        </StyledButton>\n      </StyledForm>\n      </Formik>\n        </>\n        )\n}","// import { Link} from \"react-router-dom\";\nimport { SearchMovies } from \"components/SearchMovies/SearchMovies\";\nimport { useSearchParams, useLocation } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getMoviesByQuery } from \"components/helpers/api\";\nimport { MoviesList} from \"components/MoviesList/MoviesList\";\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(\"query\") ?? '';\n  const[movies, setMovies] = useState([])\n  const location = useLocation()\n\n  useEffect(() => {\n  if(query === ''){\n    return\n  }\n  const fetchMovie = async () => {\n  const data = await getMoviesByQuery(query)\n  setMovies(data)\n  }\n  fetchMovie()\n}, [query])\n\n  const onSubmit = async (values, { resetForm }) => {\n    // setSearchParams({query : `${Date.now()}/${values}`});\n    const nextParams = query !== \"\" ? { query } : {};\n    setSearchParams(nextParams);\n    setSearchParams({query: values.query})\n    resetForm();\n  };\n\n    return (\n        <>\n        <SearchMovies onSubmit={onSubmit} query={query}/>\n        <MoviesList movies={movies} location={location}/>\n        </>\n      );\n}\nexport default Movies"],"names":["MoviesList","movies","location","map","title","id","to","state","from","axios","api_key","getTrandingMovies","response","data","results","getMovieById","movieId","getMovieCast","cast","getMovieReviews","getMoviesByQuery","values","StyledForm","styled","Form","StyledInput","Field","StyledButton","SearchMovies","onSubmit","query","initialValues","type","name","autoComplete","autoFocus","useSearchParams","searchParams","setSearchParams","get","useState","setMovies","useLocation","useEffect","fetchMovie","resetForm"],"sourceRoot":""}